import unittest
import src.unit as unit


class TestUnit(unittest.TestCase):
    def test_units(self):
        self.assertEqual(unit.variables.units['Y']['value'], 1e24)
        self.assertEqual(unit.variables.units['Z']['value'], 1e21)
        self.assertEqual(unit.variables.units['E']['value'], 1e18)
        self.assertEqual(unit.variables.units['P']['value'], 1e15)
        self.assertEqual(unit.variables.units['T']['value'], 1e12)
        self.assertEqual(unit.variables.units['G']['value'], 1e9)
        self.assertEqual(unit.variables.units['M']['value'], 1e6)
        self.assertEqual(unit.variables.units['k']['value'], 1e3)
        self.assertEqual(unit.variables.units['h']['value'], 1e2)
        self.assertEqual(unit.variables.units['da']['value'], 1e1)
        self.assertEqual(unit.variables.units['base']['value'], 1e0)
        self.assertEqual(unit.variables.units['d']['value'], 1e-1)
        self.assertEqual(unit.variables.units['c']['value'], 1e-2)
        self.assertEqual(unit.variables.units['m']['value'], 1e-3)
        self.assertEqual(unit.variables.units['u']['value'], 1e-6)
        self.assertEqual(unit.variables.units['n']['value'], 1e-9)
        self.assertEqual(unit.variables.units['p']['value'], 1e-12)
        self.assertEqual(unit.variables.units['f']['value'], 1e-15)
        self.assertEqual(unit.variables.units['a']['value'], 1e-18)
        self.assertEqual(unit.variables.units['z']['value'], 1e-21)
        self.assertEqual(unit.variables.units['y']['value'], 1e-24)

    def test_trim(self):
        self.assertEqual(unit.trim('5,000 Y'), '5000Y')
        self.assertEqual(unit.trim('5,000 Z'), '5000Z')
        self.assertEqual(unit.trim('5,000 E'), '5000E')
        self.assertEqual(unit.trim('5,000 P'), '5000P')
        self.assertEqual(unit.trim('5,000 T'), '5000T')
        self.assertEqual(unit.trim('5,000 G'), '5000G')
        self.assertEqual(unit.trim('5,000 M'), '5000M')
        self.assertEqual(unit.trim('5,000 k'), '5000k')
        self.assertEqual(unit.trim('5,000 h'), '5000h')
        self.assertEqual(unit.trim('5,000 da'), '5000da')
        self.assertEqual(unit.trim('5,000 base'), '5000base')
        self.assertEqual(unit.trim('5,000 d'), '5000d')
        self.assertEqual(unit.trim('5,000 c'), '5000c')
        self.assertEqual(unit.trim('5,000 m'), '5000m')
        self.assertEqual(unit.trim('5,000 u'), '5000u')
        self.assertEqual(unit.trim('5,000 n'), '5000n')
        self.assertEqual(unit.trim('5,000 p'), '5000p')
        self.assertEqual(unit.trim('5,000 f'), '5000f')
        self.assertEqual(unit.trim('5,000 a'), '5000a')
        self.assertEqual(unit.trim('5,000 z'), '5000z')
        self.assertEqual(unit.trim('5,000 y'), '5000y')

    def test_split_number(self):
        self.assertEqual(unit.split_unit('5000Y')[0], '5000')
        self.assertEqual(unit.split_unit('5000Z')[0], '5000')
        self.assertEqual(unit.split_unit('5000E')[0], '5000')
        self.assertEqual(unit.split_unit('5000P')[0], '5000')
        self.assertEqual(unit.split_unit('5000T')[0], '5000')
        self.assertEqual(unit.split_unit('5000G')[0], '5000')
        self.assertEqual(unit.split_unit('5000M')[0], '5000')
        self.assertEqual(unit.split_unit('5000k')[0], '5000')
        self.assertEqual(unit.split_unit('5000h')[0], '5000')
        self.assertEqual(unit.split_unit('5000da')[0], '5000')
        self.assertEqual(unit.split_unit('5000base')[0], '5000')
        self.assertEqual(unit.split_unit('5000d')[0], '5000')
        self.assertEqual(unit.split_unit('5000c')[0], '5000')
        self.assertEqual(unit.split_unit('5000m')[0], '5000')
        self.assertEqual(unit.split_unit('5000u')[0], '5000')
        self.assertEqual(unit.split_unit('5000n')[0], '5000')
        self.assertEqual(unit.split_unit('5000p')[0], '5000')
        self.assertEqual(unit.split_unit('5000f')[0], '5000')
        self.assertEqual(unit.split_unit('5000a')[0], '5000')
        self.assertEqual(unit.split_unit('5000z')[0], '5000')
        self.assertEqual(unit.split_unit('5000y')[0], '5000')

    def test_split_suffix(self):
        self.assertEqual(unit.split_unit('5000Y')[1], 'Y')
        self.assertEqual(unit.split_unit('5000Z')[1], 'Z')
        self.assertEqual(unit.split_unit('5000E')[1], 'E')
        self.assertEqual(unit.split_unit('5000P')[1], 'P')
        self.assertEqual(unit.split_unit('5000T')[1], 'T')
        self.assertEqual(unit.split_unit('5000G')[1], 'G')
        self.assertEqual(unit.split_unit('5000M')[1], 'M')
        self.assertEqual(unit.split_unit('5000k')[1], 'k')
        self.assertEqual(unit.split_unit('5000h')[1], 'h')
        self.assertEqual(unit.split_unit('5000da')[1], 'da')
        self.assertEqual(unit.split_unit('5000base')[1], 'base')
        self.assertEqual(unit.split_unit('5000d')[1], 'd')
        self.assertEqual(unit.split_unit('5000c')[1], 'c')
        self.assertEqual(unit.split_unit('5000m')[1], 'm')
        self.assertEqual(unit.split_unit('5000u')[1], 'u')
        self.assertEqual(unit.split_unit('5000n')[1], 'n')
        self.assertEqual(unit.split_unit('5000p')[1], 'p')
        self.assertEqual(unit.split_unit('5000f')[1], 'f')
        self.assertEqual(unit.split_unit('5000a')[1], 'a')
        self.assertEqual(unit.split_unit('5000z')[1], 'z')
        self.assertEqual(unit.split_unit('5000y')[1], 'y')

    def test_base(self):
        self.assertEqual(unit.base('5Y'), 5 * 1e24)
        self.assertEqual(unit.base('5Z'), 5 * 1e21)
        self.assertEqual(unit.base('5E'), 5 * 1e18)
        self.assertEqual(unit.base('5P'), 5 * 1e15)
        self.assertEqual(unit.base('5T'), 5 * 1e12)
        self.assertEqual(unit.base('5G'), 5 * 1e9)
        self.assertEqual(unit.base('5M'), 5 * 1e6)
        self.assertEqual(unit.base('5k'), 5 * 1e3)
        self.assertEqual(unit.base('5h'), 5 * 1e2)
        self.assertEqual(unit.base('5da'), 5 * 1e1)
        self.assertEqual(unit.base('5base'), 5 * 1e0)
        self.assertEqual(unit.base('5d'), 5 * 1e-1)
        self.assertEqual(unit.base('5c'), 5 * 1e-2)
        self.assertEqual(unit.base('5m'), 5 * 1e-3)
        self.assertEqual(unit.base('5u'), 5 * 1e-6)
        self.assertEqual(unit.base('5n'), 5 * 1e-9)
        self.assertEqual(unit.base('5p'), 5 * 1e-12)
        self.assertEqual(unit.base('5f'), 5 * 1e-15)
        self.assertEqual(unit.base('5a'), 5 * 1e-18)
        self.assertEqual(unit.base('5z'), 5 * 1e-21)
        self.assertEqual(unit.base('5y'), 5 * 1e-24)

    def test_convert(self):
        self.assertEqual(unit.convert('5Y', 'base'), 5 * 1e24)
        self.assertEqual(unit.convert('5Z', 'base'), 5 * 1e21)
        self.assertEqual(unit.convert('5E', 'base'), 5 * 1e18)
        self.assertEqual(unit.convert('5P', 'base'), 5 * 1e15)
        self.assertEqual(unit.convert('5T', 'base'), 5 * 1e12)
        self.assertEqual(unit.convert('5G', 'base'), 5 * 1e9)
        self.assertEqual(unit.convert('5M', 'base'), 5 * 1e6)
        self.assertEqual(unit.convert('5k', 'base'), 5 * 1e3)
        self.assertEqual(unit.convert('5h', 'base'), 5 * 1e2)
        self.assertEqual(unit.convert('5da', 'base'), 5 * 1e1)
        self.assertEqual(unit.convert('5base', 'base'), 5 * 1e0)
        self.assertEqual(unit.convert('5d', 'base'), 5 * 1e-1)
        self.assertEqual(unit.convert('5c', 'base'), 5 * 1e-2)
        self.assertEqual(unit.convert('5m', 'base'), 5 * 1e-3)
        self.assertEqual(unit.convert('5u', 'base'), 5 * 1e-6)
        self.assertEqual(unit.convert('5n', 'base'), 5 * 1e-9)
        self.assertEqual(unit.convert('5p', 'base'), 5 * 1e-12)
        self.assertEqual(unit.convert('5f', 'base'), 5 * 1e-15)
        self.assertEqual(unit.convert('5a', 'base'), 5 * 1e-18)
        self.assertEqual(unit.convert('5z', 'base'), 5 * 1e-21)
        self.assertEqual(unit.convert('5y', 'base'), 5 * 1e-24)
